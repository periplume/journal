#!/bin/bash
# create new journal file using format YYYY-MM-DD.txt eg 2016-03-07.txt
# and open in vim
# maintain all the journal files

date=$(date +%F)
# eg "2016-03-21" or %Y-%m-%d
year=${date:0:4}
month=${date:5:2}
day=${date:8:2}
timestamp=$(date)
startfile=.$date.start
journalfile=$date.txt
lastjournal=$(<.lastjournal)
lastjournalmonth=${lastjournal:5:2}
lastjournalyear=${lastjournal:0:4}
scriptname=${0##*/}

function closelasteffort
{
	# to be called when there is no existing dot startfile for today, ie
	# when this is the first journal of the day, and the last journal should
	# be processed and closed
	laststartfile=.$lastjournal.start
	lastjournal=$lastjournal.txt
	mtimejournal=`stat -f "%m" $lastjournal`
	mtimestart=`stat -f "%m" $laststartfile`
	lasteffort=`expr $mtimejournal - $mtimestart`
	echo $lasteffort >> $laststartfile
	finalsum=`paste -sd+ $laststartfile | bc`
	echo sum=$finalsum >> $laststartfile
	totalwords=`wc $lastjournal | awk {'print $2'}`
	echo wc=$totalwords >> $laststartfile
	wpm=$(bc -l <<< "$totalwords/$finalsum*60" | cut -d'.' -f1)
	echo wpm=$wpm >> $laststartfile
	chmod ugo=r $lastjournal
	chmod ugo=r $laststartfile
}

function updatelasteffort
{
	# get last effort time and append to dot startfile
	# reset mtime on dot startfile
	mtimejournal=$(stat -f "%m" $journalfile)
	mtimestart=$(stat -f "%m" $startfile)
	lasteffort=`expr $mtimejournal - $mtimestart`
	echo $lasteffort >> $startfile
}

function archivelastmonth
{
	archive=archive/$lastjournalyear/$lastjournalmonth
	echo "archiving to $archive"
	mkdir -p $archive
	mv $lastjournalyear-$lastjournalmonth-??.txt $archive
	mv .$lastjournalyear-$lastjournalmonth-??.start $archive
	summaryfile=archive/$lastjournalyear-$lastjournalmonth.summary
	touch $summaryfile
	totalwords=$(grep wc= $archive/.$lastjournalyear-$lastjournalmonth-??.start | cut -d= -f2 | paste -sd+ - | bc)
	echo wc=$totalwords >> $summaryfile
}

function journal
{
	if [ -f $startfile ];
	then
		# a startfile exists for today, therefore a journalfile exists
		updatelasteffort
		printf "\nstart> $timestamp \n" >> $journalfile
		touch $startfile
	else
		# this is a new journal entry for the day
		closelasteffort
		touch $startfile
		touch $journalfile
		printf "\nstart> $timestamp \n" >> $journalfile
		ln -sf $journalfile today
		# check if archiving is necessary
		if [ $month -eq $lastjournalmonth -a $year -eq $lastjournalyear ];
			then
				# no need to archive, same month and year as last
				# journal
				echo "archive not necessary, same month and year"
			else
				archivelastmonth
			fi
	fi
	touch .lastjournal
	echo $date > .lastjournal
	vim -c WM "+ normal G$" +startinsert $journalfile && printf "\nstop> `date`\n" >> $journalfile
}

function usage
{
	echo "usage: $scriptname"
	echo "$scriptname report [week|month|year|all}"
	echo "$scriptname encrypt [not yet functional]"
	echo "$scriptname archive [to usb, eg, not yet funtional]" 
	echo "$scriptname read [random|day|?]"
	echo "$scriptname search <term> [timeframe]"
	echo "$scriptname help"
	exit
}

function report
{
	if [ $timeframe = "day" ]
	then
		words=`wc today | awk {'print $2'}`
	elif [ "$timeframe" = "week" ]
	then
		words="week not implemented yet"
	elif [ "$timeframe" = "month" ]
	then
		words=`wc *.txt | tail -n1 | awk {'print $2'}`
	elif [ "$timeframe" = "year" ]
	then
		words="year not implemented yet"
	elif [ "$timeframe" = "all" ]
	then
		words="all not implemented yet"
	fi
	echo "timeframe=$timeframe"
	echo "total words = $words"
	#grep wc archive/*.summary
	#wc *.txt
	exit
}

# if no arguments
if [ "$#" -eq 0 ]
then
	# run journal as usual
	journal
else
	# if there are arguments, parse them
	while [ $# -gt 0 ]
	do
		case "$1" in
			report)
				# check if there are options to the verb
				if [ -z $2 ]
				then
					timeframe=all
					report
				else
					case "$2" in
						day)
							timeframe=day
							report
							;;
						week)
							timeframe=week
							report
							;;
						month)
							timeframe=month
							report
							;;
						year)
							timeframe=year
							report
							;;
						all)
							timeframe=all
							report
							;;
						*)
							echo "usage: journal report [day|week|month|year|all]"
							exit
							;;
					esac
				fi
				;;
			search)
				echo "search function coming soon"
				exit
				;;
			read)
				echo "read function coming soon"
				exit
				;;
			archive)
				echo "archive function coming soon"
				exit
				;;
			encrypt)
				echo "encrypt funtion coming soon"
				exit
				;;
			help|*)
				usage
				;;
		esac
	done
fi
exit

